#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#pragma shader_stage(raygen)

#include "utils.glsl"

layout (location = 0) rayPayloadEXT RayPayload Ray;
layout (location = 1) rayPayloadEXT ShadowRayPayload ShadowRay;

layout (binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout (binding = 1, std140) buffer PixelBuffer {
  vec4 pixels[];
} pixelBuffer;

layout (binding = 2, std140) buffer AccumulationBuffer {
  vec4 pixels[];
} accumulationBuffer;

layout (binding = 3) uniform CameraBuffer {
  vec4 forward;
  mat4 viewInverse;
  mat4 projectionInverse;
  mat4 viewProjection;
  mat4 previousViewInverse;
  mat4 previousProjectionInverse;
  float aperture;
  float focusDistance;
  float zNear;
  float zFar;
} Camera;

layout (binding = 4) uniform SettingsBuffer {
  uint sampleCount;
  uint totalSampleCount;
  uint lightCount;
  uint screenWidth;
  uint screenHeight;
  uint pad_0;
  uint pad_1;
  uint pad_2;
} Settings;

void main() {
  const ivec2 ipos = ivec2(gl_LaunchIDEXT.xy);
  const ivec2 resolution = ivec2(gl_LaunchSizeEXT.xy);
  const uint pixelIndex = ipos.y * resolution.x + ipos.x;

  const uint sampleCount = Settings.sampleCount;
  const uint bounceCount = 3;
  const uint totalSampleCount = Settings.totalSampleCount;

  Ray.seed = Tea(Tea(ipos.x, ipos.y), Settings.totalSampleCount);

  const uint cullMask = 0x80;

  vec3 pixelColor = vec3(0);
  for (uint ss = 0; ss < sampleCount; ++ss) {
    const vec2 offset = Camera.aperture / 2.0 * RandInUnitDisk(Ray.seed);
    const vec2 pixel = vec2(ipos.x + Randf01(Ray.seed), ipos.y + Randf01(Ray.seed));
    const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

    vec4 origin = Camera.viewInverse * vec4(offset, 0, 1);
    vec4 target = Camera.projectionInverse * (vec4(uv.x, uv.y, 1, 1));
    vec4 direction = Camera.viewInverse * vec4(normalize(target.xyz * Camera.focusDistance - vec3(offset, 0)), 0);

    vec3 radiance = vec3(0);
    Ray.throughput = vec4(1);
    for (uint bb = 0; bb < bounceCount; ++bb) {
      traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, cullMask, 0, 0, 0, origin.xyz, Camera.zNear, direction.xyz, Camera.zFar, 0);

      radiance += Ray.radianceAndDistance.rgb;

      // abort if the ray is either invalid or didn't hit anything
      const float t = Ray.radianceAndDistance.w;
      if (t < 0.0 || Ray.scatterDirection.w <= 0.0) break;

      // move the ray based on the bsdf direction
      origin = origin + t * direction;
      direction = vec4(Ray.scatterDirection.xyz, 0);
    };
    pixelColor += radiance;
  };
  pixelColor = max(vec3(0), pixelColor);

  const bool accumulate = Settings.sampleCount != Settings.totalSampleCount;
  const vec3 accumulatedColor = accumulationBuffer.pixels[pixelIndex].rgb * float(accumulate) + pixelColor;
  pixelColor = accumulatedColor * (1.0 / Settings.totalSampleCount);
  accumulationBuffer.pixels[pixelIndex].rgb = accumulatedColor;

  pixelColor = Uncharted2ToneMapping(pixelColor);

  pixelBuffer.pixels[pixelIndex] = vec4(pow(pixelColor, vec3(1.0 / 2.2)), 1);
}
